#!/bin/bash
set -e


function usage()
{
   cat << HEREDOC

   Usage: backup-utility [--restore] [-f URL]

   optional arguments:
     -h, --help           show this help message and exit
     -f, --file  URL      url to a remote backup tar to restore from
     --restore            when specified utility restores from an existing backup specified using -f
HEREDOC
}

# Checks if provided argument is a url for downloading it
function is_url() {
  regex='(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'

  [[ $1 =~ $regex ]]
}

function get_local_file_url(){
  if is_url $1; then
    >&2 echo "Downloading from $1";

    mkdir -p /tmp/backups
    output_path=/tmp/backups/0_gitlab_backup.tar
    curl --progress-bar -o $output_path $1
    echo $output_path
  else
    >&2 echo "Invalid Url $1"
    exit 1
  fi
}

function restore(){
  if [ -z "$BACKUP_LOCATION" ]; then
    echo "You need to set BACKUP_LOCATION variable"
    exit 1
  fi

  file=$(get_local_file_url $BACKUP_LOCATION)

  # Verify that its a valid tar
  if ! tar -tzf $file >/dev/null; then
    >&2 echo "Bad tar file"
    exit 1
  fi

  dir_name=$(dirname $file)
  file_name=$(basename $file)
  timestamp="${file_name%%_*}"

  gitlab-rake gitlab:backup:restore DIRECTORY=/tmp/backups BACKUP=$timestamp
}

function backup(){
  echo 0
}



while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -h)
    usage
    shift
    ;;
    -f|--file)
    BACKUP_LOCATION="$2"
    shift
    shift
    ;;
    --restore)
    RESTORE="true"
    shift
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done

if [ "$RESTORE" = "true" ]; then
  echo $BACKUP_LOCATION;
  restore
fi

