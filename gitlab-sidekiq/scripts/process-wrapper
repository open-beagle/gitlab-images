#!/bin/bash

set -e

echo "Starting Sidekiq"

if [[ "${SIDEKIQ_CLUSTER^^}" = 'TRUE' ]]; then
    # sidekiq-cluster offers two things:
    #
    # 1. The ability to run and supervise multiple Sidekiq processes,
    #    potentially listening to different queues.
    # 2. Enhanced queue pre-processing, including the ability to negate
    #    a set of queues and the experimental query selector.
    #
    # In this case, we do not want to start multiple Sidekiq processes
    # inside a single pod - for that, we'd run additional pods. As we
    # only need the second item, we use the `--dryrun` option to
    # sidekiq-cluster to get the command line it would execute, and then
    # execute that command directly.
    #
    # See https://gitlab.com/gitlab-org/build/CNG/-/merge_requests/418#note_320550297
    #
    /srv/gitlab/bin/$(
        /srv/gitlab/bin/sidekiq-cluster \
            --dryrun \
            -r /srv/gitlab \
            -e production \
            --min-concurrency ${SIDEKIQ_CONCURRENCY_MIN:-$SIDEKIQ_CONCURRENCY} \
            --max-concurrency ${SIDEKIQ_CONCURRENCY_MAX:-$SIDEKIQ_CONCURRENCY} \
            -t $SIDEKIQ_TIMEOUT \
            '*'
        ) &
else
    /srv/gitlab/bin/bundle exec sidekiq \
                           -r /srv/gitlab \
                           -e production \
                           -c $SIDEKIQ_CONCURRENCY \
                           -t $SIDEKIQ_TIMEOUT \
                           -C /srv/gitlab/config/sidekiq_queues.yml &
fi

SIDEKIQ_PID=$!

if command -v xtail >/dev/null; then
    xtail /var/log/gitlab &
else
    # touch logs that would be generated by Jobs
    touch /var/log/gitlab/repocheck.log
    tail -f /var/log/gitlab/* &
fi

wait ${SIDEKIQ_PID}
