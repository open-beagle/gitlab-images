include: ci_files/variables.yml

before_script:
  - source build-scripts/build.sh

stages:
  - prepare
  - prepare:phase-one
  - phase-one
  - phase-two
  - phase-three
  - phase-four
  - phase-five
  - phase-six
  - release

.except-ce: &except-ce
  except:
    refs:
      - tags@gitlab-org/build/CNG
    variables:
      - $CE_PIPELINE
      - $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+(-rc\d+)?$/
      - $CI_COMMIT_REF_NAME =~ /^\d+-\d+-stable$/

.except-ee: &except-ee
  except:
    refs:
      - tags@gitlab-org/build/CNG
    variables:
      - $EE_PIPELINE
      - $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+(-rc\d+)?-ee$/
      - $CI_COMMIT_REF_NAME =~ /^\d+-\d+-stable-ee$/
      - $UBI_PIPELINE == "true"

.job-base: &job-base
  image: "registry.gitlab.com/gitlab-org/gitlab-omnibus-builder:ruby_docker-0.0.7"
  services:
  - docker:19.03.0-dind
  dependencies: []
  retry: 1
  before_script:
    - mkdir -p artifacts/images/
    - source build-scripts/build.sh
    - if [ "${UBI_PIPELINE}" = "true" ]; then
    -   export DOCKERFILE_EXT='.ubi8'
    -   export IMAGE_TAG_EXT='-ubi8'
    -   use_assets
    - fi
    - if [ -n "$GITALY_SERVER_VERSION" ]; then
    -   export GITALY_VERSION=$GITALY_SERVER_VERSION;
    - fi
    - export {CONTAINER_VERSION,BASE_VERSION}=$(get_version gitlab-ruby)
    - export TARGET_VERSION=$(get_target_version)
    - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
  artifacts:
    paths:
      - artifacts/
  except:
    - tags@gitlab-org/build/CNG
  only:
    # REMOVE: short circuit the pipeline for test purposes.
    variables:
      - $CI_JOB_NAME == "kubectl"
      - $CI_JOB_NAME == "gitlab-ruby"

.build-job-base: &build-job-base
  image: "registry.gitlab.com/gitlab-org/gitlab-omnibus-builder:ruby_docker-0.0.7"
  services:
  - docker:19.03.0-dind
  retry: 1
  before_script:
    - source build-scripts/build.sh
    - export DOCKERFILE_EXT='.build.ubi8'
    - export IMAGE_TAG_EXT='-assets-ubi8'
    - export UBI_BUILD_IMAGE='true'
    - export {CONTAINER_VERSION,BASE_VERSION}=$(get_version gitlab-ruby)
    - export TARGET_VERSION=$(get_target_version)
  artifacts:
    paths:
      - artifacts/
  only:
    variables:
    # REMOVE: short circuit the pipeline for test purposes.
    # - $UBI_PIPELINE == "true"
      - $CI_JOB_NAME == "build:kubectl"
      - $CI_JOB_NAME == "build:gitlab-ruby"

gitlab-ubi-builder:
  <<: *job-base
  stage: prepare
  only:
    variables:
    # REMOVE: short circuit the pipeline for test purposes.
    # - $UBI_PIPELINE == "true"
      - $UBI_PIPELINE == ""
  script:
    - build_if_needed
    - push_latest

build:gitlab-ruby:
  <<: *build-job-base
  stage: prepare:phase-one
  script:
    - build_if_needed
    - copy_assets

gitlab-ruby:
  <<: *job-base
  stage: phase-one
  dependencies:
    - build:gitlab-ruby
  script:
    - build_if_needed
    - push_if_master_or_stable_or_tag

build:postgresql:
  <<: *build-job-base
  stage: prepare:phase-one
  script:
    - export CONTAINER_VERSION=($(echo -n "$TARGET_VERSION${PG_VERSION}" | sha1sum))
    - build_if_needed --build-arg "PG_VERSION=$PG_VERSION"
    - copy_assets

postgresql:
  <<: *job-base
  stage: phase-one
  dependencies:
    - build:postgresql
  script:
    - export CONTAINER_VERSION=($(echo -n "$TARGET_VERSION$PG_VERSION" | sha1sum))
    - build_if_needed --build-arg "PG_VERSION=$PG_VERSION"
    - if [ -n "$BUILDING_IMAGE" ]; then
    -  tag_and_push $PG_VERSION${IMAGE_TAG_EXT}
    - fi
    - push_if_master_or_stable_or_tag

cfssl-self-sign:
  <<: *job-base
  stage: phase-one
  script:
    - export DOCKERFILE_EXT=
    - export CONTAINER_VERSION=($(echo -n "$TARGET_VERSION$CFSSL_VERSION" | sha1sum))
    - build_if_needed --build-arg "CFSSL_VERSION=$CFSSL_VERSION"
                      --build-arg "ALPINE_VERSION=$ALPINE_VERSION"
    - push_if_master_or_stable_or_tag
    - push_if_master_or_stable_or_tag "$CFSSL_VERSION"

build:kubectl:
  <<: *build-job-base
  stage: prepare:phase-one
  script:
    - export CONTAINER_VERSION=($(echo -n "$TARGET_VERSION${KUBECTL_VERSION}" | sha1sum))
    - build_if_needed --build-arg "KUBECTL_VERSION=${KUBECTL_VERSION}"
    - copy_assets

kubectl:
  <<: *job-base
  stage: phase-one
  dependencies:
    - build:kubectl
  script:
    - export CONTAINER_VERSION=($(echo -n "$TARGET_VERSION${KUBECTL_VERSION}" | sha1sum))
    - build_if_needed --build-arg "KUBECTL_VERSION=${KUBECTL_VERSION}"
    - if [[ -n "${BUILDING_IMAGE}" && "${UBI_PIPELINE}" = "true" ]]; then
    -   tag_and_push $KUBECTL_VERSION${IMAGE_TAG_EXT}
    - else
    -   push_if_master_or_stable_or_tag $KUBECTL_VERSION
    - fi
    - push_if_master_or_stable_or_tag

alpine-certificates:
  <<: *job-base
  stage: phase-one
  script:
    - export DOCKERFILE_EXT=
    # sets CA_PKG_VERSION to `20171114-r3` (from `P:ca-certificates\nV:VERSION\n`)
    - export CA_PKG_VERSION=$(curl -qs http://dl-cdn.alpinelinux.org/alpine/v${ALPINE_VERSION}/main/x86_64/APKINDEX.tar.gz | tar xzf - -O APKINDEX | grep -A1 '^P:ca-certificates$' | tail -n1 | cut -d ':' -f2)
    - export CONTAINER_VERSION=($(echo -n "$TARGET_VERSION$CA_PKG_VERSION" | sha1sum))
    - build_if_needed --build-arg "ALPINE_VERSION=${ALPINE_VERSION}"
                      --build-arg "CA_PKG_VERSION=${CA_PKG_VERSION}"
    - push_if_master_or_stable_or_tag
    - push_if_master_or_stable_or_tag ${CA_PKG_VERSION}

gitlab-python:
  <<: *job-base
  stage: phase-one
  script:
    - export CONTAINER_VERSION=($(echo -n "$TARGET_VERSION$PYTHON_VERSION" | sha1sum))
    - build_if_needed --build-arg "PYTHON_VERSION=${PYTHON_VERSION}"
    - if [ -n "$BUILDING_IMAGE" ]; then
    -   tag_and_push $PYTHON_VERSION${IMAGE_TAG_EXT}
    - fi
    - push_if_master_or_stable_or_tag

gitlab-redis-ha:
  <<: *job-base
  stage: phase-two
  script:
    - export CONTAINER_VERSION=($(echo -n "$TARGET_VERSION$(date -u +%D)" | sha1sum))
    - build_if_needed --build-arg "KUBECTL_TAG=${KUBECTL_VERSION}${IMAGE_TAG_EXT}"
    - push_if_master_or_stable_or_tag

gitlab-go:
  <<: *job-base
  stage: phase-two
  script:
    - export CONTAINER_VERSION=($(echo -n "$BASE_VERSION$TARGET_VERSION$GO_VERSION" | sha1sum))
    - ruby_version=$(get_version gitlab-ruby)
    - build_if_needed --build-arg "GO_VERSION=$GO_VERSION"
                      --build-arg "FROM_IMAGE=$CI_REGISTRY_IMAGE/gitlab-ruby"
                      --build-arg "TAG=$ruby_version${IMAGE_TAG_EXT}"
    - push_if_master_or_stable_or_tag
  dependencies:
      - gitlab-ruby

gitlab-rails-ee:
  <<: *job-base
  stage: phase-five
  variables:
    ee: "true"
  script:
    - go_dir_version=$(get_version gitlab-go)
    - go_version=($(echo -n "$BASE_VERSION$go_dir_version$GO_VERSION" | sha1sum))
    - git_version=($(echo -n "$BASE_VERSION$go_version$GIT_VERSION" | sha1sum))
    - ruby_version=$(get_version gitlab-ruby)
    - export FORCE_IMAGE_BUILDS="${FORCE_IMAGE_BUILDS-${FORCE_RAILS_IMAGE_BUILDS-false}}"
    - export CONTAINER_VERSION=($(echo -n "$ruby_version$TARGET_VERSION$GITLAB_VERSION$(date -u +%D)" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/gitlab-ruby:$ruby_version${IMAGE_TAG_EXT}"
    - pg_image="$CI_REGISTRY_IMAGE/postgresql:$PG_VERSION${IMAGE_TAG_EXT}"
    - gei_dir_version=$(get_version gitlab-elasticsearch-indexer)
    - gei_version=($(echo -n "$GITLAB_ELASTICSEARCH_INDEXER_VERSION$git_version$gei_dir_version" | sha1sum))
    - gei_image="${CI_REGISTRY_IMAGE}/gitlab-elasticsearch-indexer:${gei_version}${IMAGE_TAG_EXT}"
    - docker pull $pg_image > /dev/null || true
    - export ASSETS_IMAGE="${ASSETS_IMAGE_REGISTRY_PREFIX}/${EE_PROJECT}/${ASSETS_IMAGE_PREFIX}-ee:${GITLAB_ASSETS_TAG}"
    - fetch_assets
    - build_if_needed --build-arg "GITLAB_EDITION=gitlab-ee"
                      --build-arg "GITLAB_VERSION=${GITLAB_VERSION}"
                      --build-arg "GITLAB_NAMESPACE=${GITLAB_NAMESPACE}"
                      --build-arg "GITLAB_PROJECT=${EE_PROJECT}"
                      --build-arg "FETCH_ARTIFACTS_PAT=${FETCH_DEV_ARTIFACTS_PAT}"
                      --build-arg "CI_API_V4_URL=${CI_API_V4_URL}"
                      --build-arg "CACHE_BUSTER=$GITLAB_VERSION$(date -uI)"
                      --build-arg "TAG=$ruby_version${IMAGE_TAG_EXT}"
                      --build-arg "PG_IMAGE=$pg_image"
                      --build-arg "GEI_IMAGE=${gei_image}"
                      --build-arg "ASSETS_IMAGE=${ASSETS_IMAGE}"
    - push_if_master_or_stable_or_tag $GITLAB_REF_SLUG${IMAGE_TAG_EXT}
    - echo -n "${CONTAINER_VERSION}" > artifacts/rails_container_ee.txt
  <<: *except-ce

gitlab-rails-ce:
  <<: *job-base
  stage: phase-five
  script:
    - ruby_version=$(get_version gitlab-ruby)
    - export FORCE_IMAGE_BUILDS="${FORCE_IMAGE_BUILDS-${FORCE_RAILS_IMAGE_BUILDS-false}}"
    - export CONTAINER_VERSION=($(echo -n "$ruby_version$TARGET_VERSION$GITLAB_VERSION$(date -u +%D)" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/gitlab-ruby:$ruby_version"
    - pg_image="$CI_REGISTRY_IMAGE/postgresql:$PG_VERSION"
    - docker pull $pg_image > /dev/null || true
    - export ASSETS_IMAGE="${ASSETS_IMAGE_REGISTRY_PREFIX}/${CE_PROJECT}/${ASSETS_IMAGE_PREFIX}-ce:${GITLAB_ASSETS_TAG}"
    - fetch_assets
    - build_if_needed --build-arg "GITLAB_EDITION=gitlab-ce"
                      --build-arg "GITLAB_VERSION=${GITLAB_VERSION}"
                      --build-arg "GITLAB_NAMESPACE=${GITLAB_NAMESPACE}"
                      --build-arg "GITLAB_PROJECT=${CE_PROJECT}"
                      --build-arg "FETCH_ARTIFACTS_PAT=${FETCH_DEV_ARTIFACTS_PAT}"
                      --build-arg "CI_API_V4_URL=${CI_API_V4_URL}"
                      --build-arg "CACHE_BUSTER=$GITLAB_VERSION$(date -uI)"
                      --build-arg "TAG=$ruby_version"
                      --build-arg "PG_IMAGE=$pg_image"
                      --build-arg "ASSETS_IMAGE=${ASSETS_IMAGE}"
    - push_if_master_or_stable_or_tag $GITLAB_REF_SLUG
    - echo -n "${CONTAINER_VERSION}" > artifacts/rails_container_ce.txt
  <<: *except-ee

gitlab-task-runner-ee:
  <<: *job-base
  stage: phase-six
  script:
    - ruby_version=$(get_version gitlab-ruby)
    - rails_version=$(get_version gitlab-rails)
    - rails_container=$(cat artifacts/rails_container_ee.txt)
    - export FORCE_IMAGE_BUILDS="${FORCE_IMAGE_BUILDS-${FORCE_RAILS_IMAGE_BUILDS-false}}"
    - export CONTAINER_VERSION=($(echo -n "$rails_container$TARGET_VERSION" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/gitlab-rails-ee:$rails_container${IMAGE_TAG_EXT}"
    - build_if_needed --build-arg "FROM_IMAGE=$CI_REGISTRY_IMAGE/gitlab-rails-ee"
                      --build-arg "TAG=$rails_container${IMAGE_TAG_EXT}"
                      --build-arg "PYTHON_TAG=${PYTHON_VERSION}${IMAGE_TAG_EXT}"
                      --build-arg "S3CMD_VERSION=$S3CMD_VERSION"
                      --build-arg "GITLAB_VERSION=${GITLAB_VERSION}"
    - push_if_master_or_stable_or_tag $GITLAB_REF_SLUG${IMAGE_TAG_EXT}
  dependencies:
    - gitlab-rails-ee
  <<: *except-ce

gitlab-task-runner-ce:
  <<: *job-base
  stage: phase-six
  script:
    - ruby_version=$(get_version gitlab-ruby)
    - rails_version=$(get_version gitlab-rails)
    - rails_container=$(cat artifacts/rails_container_ce.txt)
    - export FORCE_IMAGE_BUILDS="${FORCE_IMAGE_BUILDS-${FORCE_RAILS_IMAGE_BUILDS-false}}"
    - export CONTAINER_VERSION=($(echo -n "$rails_container$TARGET_VERSION" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/gitlab-rails-ce:$rails_container"
    - build_if_needed --build-arg "FROM_IMAGE=$CI_REGISTRY_IMAGE/gitlab-rails-ce"
                      --build-arg "TAG=$rails_container"
                      --build-arg "PYTHON_TAG=${PYTHON_VERSION}"
                      --build-arg "S3CMD_VERSION=$S3CMD_VERSION"
    - push_if_master_or_stable_or_tag $GITLAB_REF_SLUG
  dependencies:
    - gitlab-rails-ce
  <<: *except-ee

gitlab-geo-logcursor:
  <<: *job-base
  stage: phase-six
  script:
    - ruby_version=$(get_version gitlab-ruby)
    - rails_version=$(get_version gitlab-rails)
    - rails_container=$(cat artifacts/rails_container_ee.txt)
    - export FORCE_IMAGE_BUILDS="${FORCE_IMAGE_BUILDS-${FORCE_RAILS_IMAGE_BUILDS-false}}"
    - export CONTAINER_VERSION=($(echo -n "$rails_container$TARGET_VERSION" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/gitlab-rails-ee:$rails_container${IMAGE_TAG_EXT}"
    - build_if_needed --build-arg "FROM_IMAGE=$CI_REGISTRY_IMAGE/gitlab-rails-ee"
                      --build-arg "TAG=$rails_container${IMAGE_TAG_EXT}"
                      --build-arg "GITLAB_VERSION=${GITLAB_VERSION}"
    - push_if_master_or_stable_or_tag $GITLAB_REF_SLUG${IMAGE_TAG_EXT}
  dependencies:
    - gitlab-rails-ee
  <<: *except-ce

gitlab-unicorn-ee:
  <<: *job-base
  stage: phase-six
  script:
    - ruby_version=$(get_version gitlab-ruby)
    - rails_version=$(get_version gitlab-rails)
    - rails_container=$(cat artifacts/rails_container_ee.txt)
    - export FORCE_IMAGE_BUILDS="${FORCE_IMAGE_BUILDS-${FORCE_RAILS_IMAGE_BUILDS-false}}"
    - export CONTAINER_VERSION=($(echo -n "$rails_container$TARGET_VERSION" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/gitlab-rails-ee:$rails_container${IMAGE_TAG_EXT}"
    - build_if_needed --build-arg "FROM_IMAGE=$CI_REGISTRY_IMAGE/gitlab-rails-ee"
                      --build-arg "TAG=$rails_container${IMAGE_TAG_EXT}"
                      --build-arg "PYTHON_TAG=${PYTHON_VERSION}${IMAGE_TAG_EXT}"
                      --build-arg "GITLAB_VERSION=${GITLAB_VERSION}"
    - push_if_master_or_stable_or_tag $GITLAB_REF_SLUG${IMAGE_TAG_EXT}
  dependencies:
    - gitlab-rails-ee
  <<: *except-ce

gitlab-unicorn-ce:
  <<: *job-base
  stage: phase-six
  script:
    - ruby_version=$(get_version gitlab-ruby)
    - rails_version=$(get_version gitlab-rails)
    - rails_container=$(cat artifacts/rails_container_ce.txt)
    - export FORCE_IMAGE_BUILDS="${FORCE_IMAGE_BUILDS-${FORCE_RAILS_IMAGE_BUILDS-false}}"
    - export CONTAINER_VERSION=($(echo -n "$rails_container$TARGET_VERSION" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/gitlab-rails-ce:$rails_container"
    - build_if_needed --build-arg "FROM_IMAGE=$CI_REGISTRY_IMAGE/gitlab-rails-ce"
                      --build-arg "TAG=$rails_container"
    - push_if_master_or_stable_or_tag $GITLAB_REF_SLUG
  dependencies:
    - gitlab-rails-ce
  <<: *except-ee

gitlab-sidekiq-ee:
  <<: *job-base
  stage: phase-six
  script:
    - ruby_version=$(get_version gitlab-ruby)
    - rails_version=$(get_version gitlab-rails)
    - rails_container=$(cat artifacts/rails_container_ee.txt)
    - export FORCE_IMAGE_BUILDS="${FORCE_IMAGE_BUILDS-${FORCE_RAILS_IMAGE_BUILDS-false}}"
    - export CONTAINER_VERSION=($(echo -n "$rails_container$TARGET_VERSION" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/gitlab-rails-ee:$rails_container${IMAGE_TAG_EXT}"
    - build_if_needed --build-arg "FROM_IMAGE=$CI_REGISTRY_IMAGE/gitlab-rails-ee"
                      --build-arg "TAG=$rails_container${IMAGE_TAG_EXT}"
                      --build-arg "GITLAB_VERSION=${GITLAB_VERSION}"
    - push_if_master_or_stable_or_tag $GITLAB_REF_SLUG${IMAGE_TAG_EXT}
  dependencies:
    - gitlab-rails-ee
  <<: *except-ce

gitlab-sidekiq-ce:
  <<: *job-base
  stage: phase-six
  script:
    - ruby_version=$(get_version gitlab-ruby)
    - rails_version=$(get_version gitlab-rails)
    - rails_container=$(cat artifacts/rails_container_ce.txt)
    - export FORCE_IMAGE_BUILDS="${FORCE_IMAGE_BUILDS-${FORCE_RAILS_IMAGE_BUILDS-false}}"
    - export CONTAINER_VERSION=($(echo -n "$rails_container$TARGET_VERSION" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/gitlab-rails-ce:$rails_container"
    - build_if_needed --build-arg "FROM_IMAGE=$CI_REGISTRY_IMAGE/gitlab-rails-ce"
                      --build-arg "TAG=$rails_container"
    - push_if_master_or_stable_or_tag $GITLAB_REF_SLUG
  dependencies:
    - gitlab-rails-ce
  <<: *except-ee

gitlab-exporter:
  <<: *job-base
  stage: phase-two
  script:
    - ruby_version=$(get_version gitlab-ruby)
    - ruby_container=($(echo -n "$ruby_version$GITLAB_EXPORTER_VERSION" | sha1sum))
    - export CONTAINER_VERSION=($(echo -n "$ruby_container$TARGET_VERSION" | sha1sum))
    - build_if_needed --build-arg "GITLAB_EXPORTER_VERSION=$GITLAB_EXPORTER_VERSION"
                      --build-arg "FROM_IMAGE=$CI_REGISTRY_IMAGE/gitlab-ruby"
                      --build-arg "TAG=$ruby_version${IMAGE_TAG_EXT}"
                      --build-arg "PG_TAG=${PG_VERSION}${IMAGE_TAG_EXT}"
    - push_if_master_or_stable_or_tag
    - push_if_master_or_stable_or_tag $GITLAB_EXPORTER_VERSION${IMAGE_TAG_EXT}
  dependencies:
      - gitlab-ruby

gitlab-mailroom:
  <<: *job-base
  stage: phase-two
  script:
    - ruby_version=$(get_version gitlab-ruby)
    - export CONTAINER_VERSION=($(echo -n "$ruby_version$TARGET_VERSION$MAILROOM_VERSION" | sha1sum))
    - build_if_needed --build-arg "MAILROOM_VERSION=$MAILROOM_VERSION"
                      --build-arg "FROM_IMAGE=$CI_REGISTRY_IMAGE/gitlab-ruby"
                      --build-arg "TAG=$ruby_version${IMAGE_TAG_EXT}"
    - push_if_master_or_stable_or_tag
    - push_if_master_or_stable_or_tag $MAILROOM_VERSION${IMAGE_TAG_EXT}
  dependencies:
      - gitlab-ruby

gitlab-shell:
  <<: *job-base
  stage: phase-four
  script:
    - ruby_version=$(get_version gitlab-ruby)
    - go_dir_version=$(get_version gitlab-go)
    - go_version=($(echo -n "$BASE_VERSION$go_dir_version$GO_VERSION" | sha1sum))
    - export git_container=$(cat artifacts/git_container.txt)
    - export CONTAINER_VERSION=($(echo -n "$BASE_VERSION$go_version$git_container$TARGET_VERSION$GITLAB_SHELL_VERSION$(date -u +%D)" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/git-base:$git_container${IMAGE_TAG_EXT}"
    - build_if_needed --build-arg "TAG=$git_container${IMAGE_TAG_EXT}"
                      --build-arg "GO_TAG=${go_version}${IMAGE_TAG_EXT}"
                      --build-arg "GIT_TAG=$git_container${IMAGE_TAG_EXT}"
                      --build-arg "RUBY_TAG=$ruby_version${IMAGE_TAG_EXT}"
                      --build-arg "GITLAB_SHELL_VERSION=${GITLAB_SHELL_VERSION}"
                      --build-arg "GITLAB_NAMESPACE=${GITLAB_NAMESPACE}"
                      --build-arg "FETCH_ARTIFACTS_PAT=${FETCH_DEV_ARTIFACTS_PAT}"
                      --build-arg "CI_API_V4_URL=${CI_API_V4_URL}"
                      --build-arg "CACHE_BUSTER=$GITLAB_SHELL_VERSION$(date -uI)"
    - push_if_master_or_stable_or_tag $GITLAB_SHELL_VERSION${IMAGE_TAG_EXT}
    - echo -n "${CONTAINER_VERSION}" > artifacts/shell_container.txt
  dependencies:
    - gitlab-go
    - git-base

git-base:
  <<: *job-base
  stage: phase-three
  script:
    - ruby_version=$(get_version gitlab-ruby)
    - go_dir_version=$(get_version gitlab-go)
    - go_version=($(echo -n "$BASE_VERSION$go_dir_version$GO_VERSION" | sha1sum))
    - export CONTAINER_VERSION=($(echo -n "$BASE_VERSION$go_version$GIT_VERSION" | sha1sum))
    - build_if_needed --build-arg "TAG=$go_version"
                      --build-arg "GIT_VERSION=$GIT_VERSION"
                      --build-arg "RUBY_TAG=$ruby_version${IMAGE_TAG_EXT}"
    - if [ -n "$BUILDING_IMAGE" ]; then
    -  tag_and_push $GIT_VERSION${IMAGE_TAG_EXT}
    - fi
    - push_if_master_or_stable_or_tag
    - echo -n "${CONTAINER_VERSION}" > artifacts/git_container.txt

gitlab-elasticsearch-indexer:
  <<: *job-base
  stage: phase-four
  script:
    - go_dir_version=$(get_version gitlab-go)
    - go_version=($(echo -n "$BASE_VERSION$go_dir_version$GO_VERSION" | sha1sum))
    - git_version=($(echo -n "$BASE_VERSION$go_version$GIT_VERSION" | sha1sum))
    - export CONTAINER_VERSION=($(echo -n "$GITLAB_ELASTICSEARCH_INDEXER_VERSION$git_version$TARGET_VERSION" | sha1sum))
    - build_if_needed --build-arg "TAG=${git_version}${IMAGE_TAG_EXT}"
                      --build-arg "GO_TAG=${go_version}${IMAGE_TAG_EXT}"
                      --build-arg "GIT_TAG=${GIT_VERSION}${IMAGE_TAG_EXT}"
                      --build-arg "GITLAB_NAMESPACE=${GITLAB_NAMESPACE}"
                      --build-arg "FETCH_ARTIFACTS_PAT=${FETCH_DEV_ARTIFACTS_PAT}"
                      --build-arg "CI_API_V4_URL=${CI_API_V4_URL}"
                      --build-arg "GITLAB_ELASTICSEARCH_INDEXER_VERSION=${GITLAB_ELASTICSEARCH_INDEXER_VERSION}"
    - push_if_master_or_stable_or_tag "$GITLAB_ELASTICSEARCH_INDEXER_VERSION${IMAGE_TAG_EXT}"
  <<: *except-ce

gitaly:
  <<: *job-base
  stage: phase-five
  script:
    - ruby_version=$(get_version gitlab-ruby)
    - go_dir_version=$(get_version gitlab-go)
    - go_version=($(echo -n "$BASE_VERSION$go_dir_version$GO_VERSION" | sha1sum))
    - shell_version=$(get_version gitlab-shell)
    - git_version=($(echo -n "$BASE_VERSION$go_version$GIT_VERSION" | sha1sum))
    - export shell_container=$(cat artifacts/shell_container.txt)
    - export CONTAINER_VERSION=($(echo -n "$shell_container$GITALY_VERSION$git_version$TARGET_VERSION" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/gitlab-shell:$shell_container${IMAGE_TAG_EXT}"
    - build_if_needed --build-arg "GITALY_VERSION=${GITALY_VERSION}"
                      --build-arg "TAG=$GIT_VERSION${IMAGE_TAG_EXT}"
                      --build-arg "GO_TAG=${go_version}${IMAGE_TAG_EXT}"
                      --build-arg "RUBY_TAG=$ruby_version${IMAGE_TAG_EXT}"
                      --build-arg "GITLAB_NAMESPACE=${GITLAB_NAMESPACE}"
                      --build-arg "FETCH_ARTIFACTS_PAT=${FETCH_DEV_ARTIFACTS_PAT}"
                      --build-arg "CI_API_V4_URL=${CI_API_V4_URL}"
                      --build-arg "SHELL_CONTAINER=$shell_container${IMAGE_TAG_EXT}"
                      --build-arg "CACHE_BUSTER=$GITALY_VERSION$(date -uI)"
    - push_if_master_or_stable_or_tag $GITALY_VERSION${IMAGE_TAG_EXT}
  dependencies:
    - gitlab-shell

gitlab-container-registry:
  <<: *job-base
  stage: phase-four
  script:
    - go_dir_version=$(get_version gitlab-go)
    - go_version=($(echo -n "$BASE_VERSION$go_dir_version$GO_VERSION" | sha1sum))
    - git_version=($(echo -n "$BASE_VERSION$go_version$GIT_VERSION" | sha1sum))
    - export CONTAINER_VERSION=($(echo -n "$GITLAB_CONTAINER_REGISTRY_VERSION$go_version$TARGET_VERSION" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/git-base:$git_version"
    - build_if_needed --build-arg "GIT_TAG=${GIT_VERSION}${IMAGE_TAG_EXT}"
                      --build-arg "GO_TAG=${go_version}${IMAGE_TAG_EXT}"
                      --build-arg "REGISTRY_VERSION=${GITLAB_CONTAINER_REGISTRY_VERSION}"
                      --build-arg "REGISTRY_NAMESPACE=gitlab-org"
    - push_if_master_or_stable_or_tag $GITLAB_CONTAINER_REGISTRY_VERSION${IMAGE_TAG_EXT}
  dependencies:
    - git-base
    - gitlab-go

gitlab-workhorse-ee:
  <<: *job-base
  stage: phase-six
  script:
    - rails_version=$(get_version gitlab-rails)
    - ruby_version=$(get_version gitlab-ruby)
    - go_dir_version=$(get_version gitlab-go)
    - go_version=($(echo -n "$BASE_VERSION$go_dir_version$GO_VERSION" | sha1sum))
    - git_version=($(echo -n "$BASE_VERSION$go_version$GIT_VERSION" | sha1sum))
    - rails_container=$(cat artifacts/rails_container_ee.txt)
    - export CONTAINER_VERSION=($(echo -n "$GITLAB_WORKHORSE_VERSION$rails_container$go_version$TARGET_VERSION" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/git-base:$git_version${IMAGE_TAG_EXT}"
    - build_if_needed --build-arg "GIT_TAG=${GIT_VERSION}${IMAGE_TAG_EXT}"
                      --build-arg "GO_TAG=${go_version}${IMAGE_TAG_EXT}"
                      --build-arg "WORKHORSE_VERSION=$GITLAB_WORKHORSE_VERSION"
                      --build-arg "RAILS_VERSION=$rails_container${IMAGE_TAG_EXT}"
                      --build-arg "RUBY_VERSION=$ruby_version${IMAGE_TAG_EXT}"
                      --build-arg "GITLAB_NAMESPACE=${GITLAB_NAMESPACE}"
                      --build-arg "FETCH_ARTIFACTS_PAT=${FETCH_DEV_ARTIFACTS_PAT}"
                      --build-arg "CI_API_V4_URL=${CI_API_V4_URL}"
                      --build-arg "GITLAB_EDITION=gitlab-rails-ee"
    - push_if_master_or_stable_or_tag $GITLAB_REF_SLUG${IMAGE_TAG_EXT}
  <<: *except-ce
  dependencies:
    - gitlab-rails-ee

gitlab-workhorse-ce:
  <<: *job-base
  stage: phase-six
  script:
    - rails_version=$(get_version gitlab-rails)
    - ruby_version=$(get_version gitlab-ruby)
    - go_dir_version=$(get_version gitlab-go)
    - go_version=($(echo -n "$BASE_VERSION$go_dir_version$GO_VERSION" | sha1sum))
    - git_version=($(echo -n "$BASE_VERSION$go_version$GIT_VERSION" | sha1sum))
    - rails_container=$(cat artifacts/rails_container_ce.txt)
    - export CONTAINER_VERSION=($(echo -n "$GITLAB_WORKHORSE_VERSION$rails_container$go_version$TARGET_VERSION" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/git-base:$git_version"
    - build_if_needed --build-arg "GIT_TAG=${GIT_VERSION}${IMAGE_TAG_EXT}"
                      --build-arg "GO_TAG=${go_version}${IMAGE_TAG_EXT}"
                      --build-arg "WORKHORSE_VERSION=$GITLAB_WORKHORSE_VERSION"
                      --build-arg "RAILS_VERSION=${rails_container}"
                      --build-arg "RUBY_VERSION=$ruby_version"
                      --build-arg "GITLAB_NAMESPACE=${GITLAB_NAMESPACE}"
                      --build-arg "FETCH_ARTIFACTS_PAT=${FETCH_DEV_ARTIFACTS_PAT}"
                      --build-arg "CI_API_V4_URL=${CI_API_V4_URL}"
                      --build-arg "GITLAB_EDITION=gitlab-rails-ce"
    - push_if_master_or_stable_or_tag $GITLAB_REF_SLUG
  <<: *except-ee
  dependencies:
    - gitlab-rails-ce

sync-images:
  image: "docker:git"
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
  services:
    - docker:dind
  stage: release
  before_script: []
  when: manual
  script:
    - cat artifacts/images/* > image_versions.txt
    - rm -rf artifacts/*
    - sh build-scripts/docker_image_sync.sh image_versions.txt
  artifacts:
    paths:
      - artifacts/
  only:
    - tags@gitlab/charts/components/images

ubi-assets-release:
  stage: release
  dependencies:
    - build:kubectl
    - build:postgresql
    - build:gitlab-ruby
  only:
    variables:
      - $UBI_PIPELINE == "true"
  script:
    - cd artifacts/ubi
    - tar -cvf ../gitlab-ubi-assets-${TARGET_VERSION}.tar --remove-files ./*
    - cd .. && rm -rf ./ubi
  artifacts:
    paths:
      - artifacts/